{"version":3,"sources":["test/test.js"],"names":[],"mappings":"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","file":"test/test.js","sourcesContent":["\"use strict\"\n\nconst promisify = require('@atomiq/promisify');\nconst assert = require('assert');\nconst path = require('path');\nconst fs = promisify(require('fs'));\nconst samplesPath = path.join(__dirname, './samples');\nconst Phase = require('..').Phase;\n\n/*\n\n  samples/\n    sample-01/\n      only-1-per-directory.phase\n        pass/\n\t  sample1.json\n\t  sample2.json\n\tfail/\n\t  sample3.json\n\t  sample4.json\n    sample-02/\n      ...\n\n*/\n\nfunction* loadSamples() {\n  let samples = fs.readdirSync(samplesPath);\n  for (let sample of samples) {\n    let samplePath = path.join(samplesPath, sample);\n    let phaseName = fs.readdirSync(samplePath).filter(f => f.endsWith('.phase'))[0];\n    if (!phaseName) continue;\n\n    let phasePath = path.join(samplePath, phaseName);\n    let phase = fs.readFileSync(phasePath, 'utf8');\n    let sample = { path: samplePath, name: sample, phase: { phasePath: phasePath, text: phase } };\n\n    for (let testType of ['pass', 'fail']) {\n      for (let test of loadSample(sample, testType)) {\n        yield { path: samplePath, name: sample, phase: { phasePath: phasePath, text: phase }, test: test };\n      }\n    }\n  };\n}\n\nfunction* loadSample(sample, testType) {\n  let testTypePath = path.join(sample.path, testType);\n  let tests = fs.readdirSync(testTypePath);\n  for (let test of tests) {\n    let testPath = path.join(testTypePath, test);\n    let testData = JSON.parse(fs.readFileSync(testPath, 'utf8'));\n    yield { path: testPath, testType: testType, name: test, data: testData };\n  }\n}\n\n\n\nfor (let sample of loadSamples()) {\n\n  it (sample.test.name, () => {\n    console.log(sample.test.name);\n    console.log(sample.test.data);\n    let phase = new Phase(sample.phase.text, { file: sample.phase.phasePath });\n\n    let shouldPass = sample.test.testType == 'pass';\n    let result = phase.validate(sample.test.data);\n\n    if (shouldPass) {\n      console.log('should pass');\n      assert(!result.errors, 'test was expected to pass!');\n    } else {\n      console.log('should fail');\n      assert(result.errors, 'test was expected to fail!');\n    }\n\n  });\n\n}\n\n"],"sourceRoot":"/Users/tony/projects/atomiq/phase/src"}